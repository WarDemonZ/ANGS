<?php

/**
 * Implements hook_field_formatter_info().
 */
function angs_googlemap_field_formatter_info() {
  return array(
    'angs_googlemap_map' => array(
      'label' => t('ANGS Google Map'),
      'field types' => array('geofield'),
      'settings' => array(
        'geofield_map_width' => '100%',
        'geofield_map_height' => '300px',
        'geofield_map_zoom' => '8',
        'geofield_map_min_zoom' => '0',
        'geofield_map_max_zoom' => '0',
        'geofield_map_controltype' => 'default',
        'geofield_map_mtc' => 'standard',
        'geofield_map_pancontrol' => 1,
        'geofield_map_maptype' => 'map',
        'geofield_map_baselayers_map' => 1,
        'geofield_map_baselayers_satellite' => 1,
        'geofield_map_baselayers_hybrid' => 1,
        'geofield_map_baselayers_physical' => 0,
        'geofield_map_scale' => 0,
        'geofield_map_overview' => 0,
        'geofield_map_overview_opened' => 0,
        'geofield_map_scrollwheel' => 0,
        'geofield_map_draggable' => 0,
        'geofield_map_streetview_show' => 0,
        'geofield_map_center' => array(
          'lat' => 0,
          'lon' => 0
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */

function angs_googlemap_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  list($entity_id) = entity_extract_ids($entity_type, $entity);

  $settings = $display['settings'];

  $map_settings = geofield_map_settings_do($settings);
  geophp_load();
  $data = array();

  $address = array_filter($entity->field_event_address[LANGUAGE_NONE][0]);
  $address_order = array(
    "thoroughfare", 
    "premise", 
    "administrative_area", 
    "locality", 
    "postal_code"
  );
  $location = "";
  foreach ($address_order as $key) {
    if (array_key_exists($key, $address)) {
      $location .= $address[$key] . "<br />";
    }
  }

  foreach ($items as $item) {
    $geometry = geoPHP::load($item['geom']);
    if (!empty($geometry)) {
      $datum = json_decode($geometry->out('json'));
      $datum->properties = array(
        'description' => entity_label($entity_type, $entity),
        'location' => $location,
      );
      $data[] = $datum;
    }
  }

  if (!empty($data)) {
    $map_id = drupal_html_id("geofield_map_entity_{$entity_type}_{$entity_id}_{$field['field_name']}");

    $js_settings = array(
      $map_id => array(
        'map_settings' => $map_settings,
        'data' => count($data) == 1 ?
          $data[0] :
          array( 'type' => 'GeometryCollection', 'geometries' => $data),

      ),
    );

    $container_attributes = array(
      //No need for defaults here - these are populated from the field defaults.
      'style' => "height:{$settings['geofield_map_height']}; width:{$settings['geofield_map_width']}",
      'id' => $map_id,
      'class' => 'geofieldMap',
    );

    // Build API url.
    $api_url = geofield_map_build_api_url();

    foreach ($address as $key => $value) {
      $address[$key] = urlencode(check_plain($address[$key]));
    }
    $directions_url = implode("+", $address);
    $directions = l('Directions', "http://maps.google.com/maps?saddr=&daddr=" . $directions_url, array('attributes' => array('class' => array('button-type','driving-link'), 'target' => '_blank'), 'html' => TRUE));

    $element[0] = array(
      '#attached' => array(
        'js' => array(
          "$api_url" => array('type' => 'external'),
          drupal_get_path('module', 'geofield_map') . '/js/GeoJSON.js',
          drupal_get_path('module', 'angs_googlemap') . '/js/angs_googlemap.js',
          array('data' => array('geofieldMap' => $js_settings), 'type' => 'setting'),
        ),
        'css' => array(
          drupal_get_path('module', 'geofield_map') . '/css/geofield_map.css',
        ),
      ),
      '#markup' => '<div' . drupal_attributes($container_attributes) . '></div><div class="driving-directions">' . $directions . '</div>',
    );
  }

  return $element;
}

function format_address($address, $ignore) {

}

/**
 * Implements hook_field_formatter_settings_form().
 */
function angs_googlemap_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = geofield_map_settings_form($settings);
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function angs_googlemap_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();

  if ($settings['geofield_map_width']) {
    $summary[] = t('Width: @w', array('@w' => $settings['geofield_map_width']));
  }
  if ($settings['geofield_map_height']) {
    $summary[] = t('Height: @h', array('@h' => $settings['geofield_map_height']));
  }
  if ($settings['geofield_map_zoom']) {
    $summary[] = t('Zoom: @z', array('@z' => $settings['geofield_map_zoom']));
  }
  if ($settings['geofield_map_min_zoom']) {
    $summary[] = t('Zoom minimum: @z', array('@z' => $settings['geofield_map_min_zoom']));
  }
  if ($settings['geofield_map_max_zoom']) {
    $summary[] = t('Zoom maximum: @z', array('@z' => $settings['geofield_map_max_zoom']));
  }
  if ($settings['geofield_map_controltype']) {
    $summary[] = t('Zoom Control Type: @z', array('@z' => $settings['geofield_map_controltype']));
  }
  if ($settings['geofield_map_mtc']) {
    $summary[] = t('Map Control Type: @m', array('@m' => $settings['geofield_map_mtc']));
  }
  if ($settings['geofield_map_pancontrol']) {
    $summary[] = t('Show Pan Control: @yn', array('@yn' => ($settings['geofield_map_pancontrol'] ? 'Yes' : 'No')));
  }
  if ($settings['geofield_map_maptype']) {
    $summary[] = t('Default Map Type: @m', array('@m' => $settings['geofield_map_maptype']));
  }
  if ($settings['geofield_map_scale']) {
    $summary[] = t('Show Scale: @yn', array('@yn' => ($settings['geofield_map_scale'] ? 'Yes' : 'No')));
  }
  if ($settings['geofield_map_overview']) {
    $summary[] = t('Overview Map: @yn', array('@yn' => ($settings['geofield_map_overview'] ? 'Yes' : 'No')));
  }
  if ($settings['geofield_map_scrollwheel']) {
    $summary[] = t('Scrollwheel: @yn', array('@yn' => ($settings['geofield_map_scrollwheel'] ? 'Yes' : 'No')));
  }
  if ($settings['geofield_map_draggable']) {
    $summary[] = t('Draggable: @yn', array('@yn' => ($settings['geofield_map_draggable'] ? 'Yes' : 'No')));
  }
  if ($settings['geofield_map_streetview_show']) {
    $summary[] = t('Show streetview button: @yn', array('@yn' => ($settings['geofield_map_streetview_show'] ? 'Yes' : 'No')));
  }
  if ($settings['geofield_map_center']) {
    $summary[] = t('Default center: @yn', array('@yn' => ($settings['geofield_map_center'] ? 'Yes' : 'No')));
  }

  return implode('<br />', $summary);

}